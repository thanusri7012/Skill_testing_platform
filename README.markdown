# Skill Testing Platform

A Flutter-based app for creating, taking, and evaluating skill-based tests with AI-generated personalized feedback. The app uses Firebase for authentication and data storage, and integrates a rule-based AI system to provide insights on user performance.

## Core Features

- **User Authentication**:
  - Secure login/signup using Firebase Authentication (Email/Password).
  - Supports same for test creation and test-taking.
- **Test Creation and Taking**:
  - Create tests with categories (e.g., Algorithms, Databases).
  - Include various question types:
    - Multiple Choice Questions (MCQs)
    - Simple coding quizzes
    - Debugging challenges
    - Also, the users can edit and delete the tests using their pass keys.
  - Take tests and submit answers for evaluation.
- **AI-Generated Personalized Feedback**:
  - After test submission, receive detailed feedback such as:
    - "You are strong in Algorithms"
    - "You need to improve in Databases"
  - Feedback is generated based on user answers, focusing on strengths and weaknesses in specific categories.

## Data Handling

- **Firebase Integration**:
  - **Firestore**:
    - Store user profiles (e.g., email, user ID, test history).
    - Store test submissions and results (e.g., user answers, scores, timestamps).
  - **Authentication**:
    - Manage user login/signup with Firebase Authentication.
- **Data Structure**:
  - `users/{userId}`: Stores user profiles (e.g., name, email, test history).
  - `tests/{testId}`: Stores test details (e.g., category, questions, creator).
  - `submissions/{submissionId}`: Stores user test submissions (e.g., answers, score, feedback).

## AI/Logic Integration

- **Feedback Generation**:
  - Uses a rule-based logic system to analyze test performance:
    - Calculate category-wise scores (e.g., Algorithms: 80%, Databases: 40%).
    - Generate feedback based on thresholds:
      - Score &gt; 70%: "You are strong in \[Category\]."
      - Score &lt; 50%: "You need to improve in \[Category\]."
  - Example implementation in `feedback_service.dart`:

    ```dart
    Map<String, String> generateFeedback(Map<String, double> categoryScores) {
      Map<String, String> feedback = {};
      categoryScores.forEach((category, score) {
        if (score > 70) {
          feedback[category] = "You are strong in $category.";
        } else if (score < 50) {
          feedback[category] = "You need to improve in $category.";
        } else {
          feedback[category] = "Your performance in $category is average.";
        }
      });
      return feedback;
    }
    ```
- **Future Enhancement**:
  - Replace rule-based logic with a basic ML model (e.g., using TensorFlow Lite) to predict user strengths/weaknesses more accurately.

## Technical Requirements

- **Frontend**: Flutter (version 3.0.0 or higher) for a responsive UI.
- **Backend**: Firebase (Authentication for user management, Firestore for data storage).
- **AI Feedback**: Rule-based logic implemented in Dart, with potential for ML model integration.

## Setup Instructions

### 1. Install Dependencies

Navigate to the project directory and install the required dependencies:

```bash
flutter pub get
```

Ensure your `pubspec.yaml` includes these dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  firebase_core: ^3.4.0
  firebase_auth: ^5.1.0
  cloud_firestore: ^5.4.0
  flutter_animate: ^4.5.0
  google_fonts: ^6.1.0
  uuid: ^4.5.0
```

### 2. Set Up Firebase

1. **Create a Firebase Project**:

   - Go to the Firebase Console.
   - Create a new project (e.g., "Skill Testing Platform").
   - Enable Authentication (Email/Password provider).
   - Set up Firestore Database in test mode for development.

2. **Add Firebase to Your Flutter App**:

   - Install the Firebase CLI and FlutterFire CLI:

     ```bash
     npm install -g firebase-tools
     dart pub global activate flutterfire_cli
     ```
   - Configure Firebase for your app:

     ```bash
     flutterfire configure
     ```

     Select your Firebase project and platforms (iOS, Android, etc.).

3. **Update Firebase Configuration**:

   - In `lib/main.dart`, ensure Firebase options match your project settings:

     ```dart
     await Firebase.initializeApp(
       options: const FirebaseOptions(
         apiKey: "YOUR_API_KEY",
         authDomain: "YOUR_AUTH_DOMAIN",
         projectId: "YOUR_PROJECT_ID",
         storageBucket: "YOUR_STORAGE_BUCKET",
         messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
         appId: "YOUR_APP_ID",
       ),
     );
     ```
   - Replace placeholders with values from `firebase_options.dart` (generated by `flutterfire configure`).

4. **Firestore Rules**:

   - Update Firestore security rules to allow authenticated users to read/write:

     ```plaintext
     rules_version = '2';
     service cloud.firestore {
       match /databases/{database}/documents {
         match /users/{userId} {
           allow read, write: if request.auth.uid == userId;
         }
         match /tests/{testId} {
           allow read: if request.auth != null;
           allow write: if request.auth != null;
         }
         match /submissions/{submissionId} {
           allow read, write: if request.auth != null;
         }
       }
     }
     ```
   - Apply these rules in the Firebase Console under Firestore &gt; Rules.

### 3. Run the App

1. Connect a device or start an emulator/simulator.
2. Run the app:

   ```bash
   flutter run
   ```

### 4. Test the App

- **Authentication**:
  - Sign up or log in using email/password.
  - Use the same or different accounts for creating and taking tests.
- **Create a Test**:
  - Add a test with a category (e.g., Algorithms, Databases).
  - Include MCQs, coding quizzes, or debugging questions.
- **Take a Test**:
  - Select a test, answer questions, and submit.
  - View AI-generated feedback (e.g., "You are strong in Algorithms", "You need to improve in Databases").
- **Error Handling**:
  - Ensure Firestore rules allow access.
  - Verify Firebase Authentication setup if login fails.

## Project Structure

- `lib/main.dart`: App entry point with Firebase initialization and routing.
- `lib/screens/`:
  - `auth_screen.dart`: User authentication UI.
  - `create_test_screen.dart`: Interface for creating tests with categories.
  - `take_test_screen.dart`: UI for taking tests and submitting answers.
  - `test_result_screen.dart`: Displays results with AI-generated feedback.
- `lib/models/`:
  - `test.dart`: Models for tests, questions, and submissions.
- `lib/services/`:
  - `auth_service.dart`: Manages Firebase Authentication.
  - `firestore_service.dart`: Handles Firestore CRUD operations for users, tests, and submissions.
  - `feedback_service.dart`: Implements AI-driven feedback generation logic.

## Additional Notes

- **AI Feedback Focus**:
  - The app prioritizes AI-generated feedback to help users improve.
  - Feedback is based on category-wise performance, making it actionable.
- **Scalability**:
  - The rule-based feedback system can be upgraded to a machine learning model for more accurate insights.
- **Testing**:
  - Test with multiple users to ensure the same/different login functionality works.
  - Validate feedback accuracy by comparing with manual performance analysis.
